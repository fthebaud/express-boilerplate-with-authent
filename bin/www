#!/usr/bin/env node

const debug = require('debug')('my-event:server');
const http = require('http');
const https = require('https');
const fs = require('fs');
const path = require('path');

const app = require('../app');
const conf = require ('../configuration/conf');


/**
 * Create HTTP server for the app.
 */
const server = http.createServer(app);

// if ssl is enabled, create a HTTPS server for the app
let securedServer = null;
if (conf.sslEnabled) {
  // self-signed certificate was generated using openssl (ERR_CERT_AUTHORITY_INVALID...)
  //  openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365
  // then the pass was (thales35) removed because of "bad password read" error
  // openssl rsa -in key.pem -out newkey.pem && mv newkey.pem key.pem
  // http://blog.mgechev.com/2014/02/19/create-https-tls-ssl-application-with-express-nodejs/
  const httpsCredentials = {
    key: fs.readFileSync(path.join(__dirname, '../ssl/key.pem')),
    cert: fs.readFileSync(path.join(__dirname, '../ssl/cert.pem'))
  };

  securedServer = https.createServer(httpsCredentials, app);
}

/**
 * Server will listen on provided port, on all network interfaces.
 */
server.listen(conf.port);
server.on('error', onError);
server.on('listening', onListening);

if (securedServer) {
  securedServer.listen(conf.sslPort);
  securedServer.on('error', onError);
  securedServer.on('listening', onListening);
}


/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const { port } = conf;
  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}